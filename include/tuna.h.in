#ifndef TUNA_PRIV_INCLUDED
#define TUNA_PRIV_INCLUDED

///////////////////////////////////////////////////////////////////////////////

#include <stddef.h>
#include <stdint.h>

///////////////////////////////////////////////////////////////////////////////
#if __cplusplus
extern "C" {
#endif
///////////////////////////////////////////////////////////////////////////////

#if defined(_WIN32) \
 || defined(_WIN64) \
 || defined(__WIN32__) \
 || defined(__TOS_WIN__) \
 || defined(__WINDOWS__)
    #define TUNA_PRIV_OS_WINDOWS 1
#endif

///////////////////////////////////////////////////////////////////////////////

#if defined(TUNA_IMPORT) && defined(TUNA_EXPORT)
    #error "TUNA_IMPORT and TUNA_EXPORT must not be defined simultaneously"
#endif

#if TUNA_PRIV_OS_WINDOWS
    #if defined(TUNA_IMPORT)
        #define TUNA_PRIV_API __declspec(dllimport)
    #elif defined(TUNA_EXPORT)
        #define TUNA_PRIV_API __declspec(dllexport)
    #else
        #define TUNA_PRIV_API 
    #endif
#else
    #if defined(TUNA_IMPORT) || defined(TUNA_EXPORT)
        #define TUNA_PRIV_API __attribute__((visibility("default")))
    #else
        #define TUNA_PRIV_API 
    #endif
#endif

///////////////////////////////////////////////////////////////////////////////

typedef uint_least32_t tuna_version;

#define TUNA_COMPOSE_VERSION(major, minor, patch) \
    ((major) << UINT32_C(20) | (minor) << UINT32_C(10) | (patch))

#define TUNA_GET_MAJOR_VERSION(version) \
    ((version) >> UINT32_C(20))
#define TUNA_GET_MINOR_VERSION(version) \
    ((version) >> UINT32_C(10) & UINT32_C(0x3FF))
#define TUNA_GET_PATCH_VERSION(version) \
    ((version) & UINT32_C(0x3FF))

#define TUNA_INCLUDED_VERSION \
    TUNA_COMPOSE_VERSION(${MAJOR_VERSION}, ${MINOR_VERSION}, ${PATCH_VERSION})

TUNA_PRIV_API
tuna_version
tuna_get_linked_version(void);

///////////////////////////////////////////////////////////////////////////////

typedef uint_fast8_t tuna_error;
#define TUNA_UNEXPECTED       UINT8_C( 1)
#define TUNA_DEVICE_LOST      UINT8_C( 2)
#define TUNA_FORBIDDEN        UINT8_C( 3)
#define TUNA_OUT_OF_MEMORY    UINT8_C( 4)
#define TUNA_TOO_MANY_HANDLES UINT8_C( 5)
#define TUNA_DEVICE_BUSY      UINT8_C( 6)
#define TUNA_NAME_TOO_LONG    UINT8_C( 7)
#define TUNA_DUPLICATE_NAME   UINT8_C( 8)
#define TUNA_INVALID_NAME     UINT8_C( 9)
#define TUNA_MTU_TOO_SMALL    UINT8_C(10)
#define TUNA_MTU_TOO_BIG      UINT8_C(11)

TUNA_PRIV_API
char const *
tuna_get_error_name(tuna_error error);

///////////////////////////////////////////////////////////////////////////////

typedef struct tuna_device tuna_device;

TUNA_PRIV_API
void
tuna_free_device(tuna_device *device);

///////////////////////////////////////////////////////////////////////////////

typedef uint_fast8_t tuna_ownership;
#define TUNA_EXCLUSIVE UINT8_C(0)
#define TUNA_SHARED    UINT8_C(1)

TUNA_PRIV_API
tuna_error
tuna_get_ownership(tuna_device const *device, tuna_ownership *ownership);

///////////////////////////////////////////////////////////////////////////////

typedef uint_fast8_t tuna_lifetime;
#define TUNA_TRANSIENT  UINT8_C(0)
#define TUNA_PERSISTENT UINT8_C(1)

TUNA_PRIV_API
tuna_error
tuna_get_lifetime(tuna_device const *device, tuna_lifetime *lifetime);

TUNA_PRIV_API
tuna_error
tuna_set_lifetime(tuna_device *device, tuna_lifetime lifetime);

///////////////////////////////////////////////////////////////////////////////

TUNA_PRIV_API
tuna_error
tuna_get_index(tuna_device const *device, int *index);

///////////////////////////////////////////////////////////////////////////////

TUNA_PRIV_API
void
tuna_free_name(char *name);

TUNA_PRIV_API
tuna_error
tuna_get_name(tuna_device const *device, char **name);

TUNA_PRIV_API
tuna_error
tuna_set_name(tuna_device *device, char const *name);

///////////////////////////////////////////////////////////////////////////////

TUNA_PRIV_API
tuna_error
tuna_get_mtu(tuna_device const *device, size_t *mtu);

TUNA_PRIV_API
tuna_error
tuna_set_mtu(tuna_device *device, size_t mtu);

///////////////////////////////////////////////////////////////////////////////

typedef uint_fast8_t tuna_status;
#define TUNA_DISCONNECTED UINT8_C(0)
#define TUNA_CONNECTED    UINT8_C(1)

TUNA_PRIV_API
tuna_error
tuna_get_status(tuna_device const *device, tuna_status *status);

TUNA_PRIV_API
tuna_error
tuna_set_status(tuna_device *device, tuna_status status);

///////////////////////////////////////////////////////////////////////////////

#if TUNA_PRIV_OS_WINDOWS
    typedef void *tuna_io_handle;
#else
    typedef int tuna_io_handle;
#endif

TUNA_PRIV_API
tuna_io_handle
tuna_get_io_handle(tuna_device *device);

///////////////////////////////////////////////////////////////////////////////

typedef uint_least8_t tuna_address_family;
#define TUNA_IP4 UINT8_C(1)
#define TUNA_IP6 UINT8_C(2)

typedef struct tuna_address {
    tuna_address_family family;
} tuna_address;

typedef struct tuna_ip4_address {
    tuna_address_family family;
    uint_least8_t value[4];
    uint_least8_t prefix_length;
} tuna_ip4_address;

typedef struct tuna_ip6_address {
    tuna_address_family family;
    uint_least8_t value[16];
    uint_least8_t prefix_length;
} tuna_ip6_address;

TUNA_PRIV_API
tuna_error
tuna_add_address(tuna_device *device, tuna_address const *address);

TUNA_PRIV_API
tuna_error
tuna_remove_address(tuna_device *device, tuna_address const *address);

typedef struct tuna_address_list tuna_address_list;

TUNA_PRIV_API
void
tuna_free_address_list(tuna_address_list *list);

TUNA_PRIV_API
size_t
tuna_get_address_count(tuna_address_list const *list);

TUNA_PRIV_API
tuna_address const *
tuna_get_address_at(tuna_address_list const *list, size_t index);

TUNA_PRIV_API
tuna_error
tuna_get_address_list(tuna_device const *device, tuna_address_list **list);

///////////////////////////////////////////////////////////////////////////////

TUNA_PRIV_API
tuna_error
tuna_create_device(tuna_device **device, tuna_ownership ownership);

TUNA_PRIV_API
tuna_error
tuna_attach_device(tuna_device **device, tuna_device const *target);

///////////////////////////////////////////////////////////////////////////////

typedef struct tuna_device_list tuna_device_list;

TUNA_PRIV_API
void
tuna_free_device_list(tuna_device_list *list);

TUNA_PRIV_API
size_t
tuna_get_device_count(tuna_device_list const *list);

TUNA_PRIV_API
tuna_device const *
tuna_get_device_at(tuna_device_list const *list, size_t index);

TUNA_PRIV_API
tuna_error
tuna_get_device_list(tuna_device_list **list);

///////////////////////////////////////////////////////////////////////////////
#if __cplusplus
} // extern "C"
#endif
///////////////////////////////////////////////////////////////////////////////

#endif
