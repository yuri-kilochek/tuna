#ifndef TUNA_PRIV_INCLUDED
#define TUNA_PRIV_INCLUDED

///////////////////////////////////////////////////////////////////////////////

#include <stddef.h>
#include <stdint.h>

///////////////////////////////////////////////////////////////////////////////
#if __cplusplus
extern "C" {
#endif
///////////////////////////////////////////////////////////////////////////////

#if defined(_WIN32) \
 || defined(_WIN64) \
 || defined(__WIN32__) \
 || defined(__TOS_WIN__) \
 || defined(__WINDOWS__)
    #define TUNA_PRIV_OS_WINDOWS 1
#endif

///////////////////////////////////////////////////////////////////////////////

#if defined(TUNA_IMPORT) && defined(TUNA_EXPORT)
    #error "TUNA_IMPORT and TUNA_EXPORT must not be defined simultaneously."
#endif

#if TUNA_PRIV_OS_WINDOWS
    #if defined(TUNA_IMPORT)
        #define TUNA_PRIV_API __declspec(dllimport)
    #elif defined(TUNA_EXPORT)
        #define TUNA_PRIV_API __declspec(dllexport)
    #else
        #define TUNA_PRIV_API 
    #endif
#else
    #if defined(TUNA_IMPORT) || defined(TUNA_EXPORT)
        #define TUNA_PRIV_API __attribute__((visibility("default")))
    #else
        #define TUNA_PRIV_API 
    #endif
#endif

///////////////////////////////////////////////////////////////////////////////

typedef uint_least32_t tuna_version;

#define TUNA_COMPOSE_VERSION(major, minor, patch) \
    ((major) << UINT32_C(20) | (minor) << UINT32_C(10) | (patch))

#define TUNA_GET_MAJOR_VERSION(version) \
    ((version) >> UINT32_C(20))
#define TUNA_GET_MINOR_VERSION(version) \
    ((version) >> UINT32_C(10) & UINT32_C(0x3FF))
#define TUNA_GET_PATCH_VERSION(version) \
    ((version) & UINT32_C(0x3FF))

#define TUNA_INCLUDED_VERSION \
    TUNA_COMPOSE_VERSION(${MAJOR_VERSION}, ${MINOR_VERSION}, ${PATCH_VERSION})

TUNA_PRIV_API extern
tuna_version const tuna_linked_version;

///////////////////////////////////////////////////////////////////////////////

typedef enum tuna_error {
    TUNA_PRIV_NOT_ERROR,

    TUNA_UNEXPECTED,
    TUNA_DEVICE_LOST,
    TUNA_FORBIDDEN,
    TUNA_OUT_OF_MEMORY,
    TUNA_TOO_MANY_HANDLES,
    TUNA_NAME_TOO_LONG,
    TUNA_DUPLICATE_NAME,
    TUNA_INVALID_NAME,
    TUNA_MTU_TOO_SMALL,
    TUNA_MTU_TOO_BIG,
} tuna_error;

TUNA_PRIV_API
char const*
tuna_get_error_name(tuna_error error);

///////////////////////////////////////////////////////////////////////////////

typedef struct tuna_device tuna_device;

TUNA_PRIV_API
tuna_error
tuna_create_device(tuna_device **device);

TUNA_PRIV_API
void
tuna_destroy_device(tuna_device *device);

///////////////////////////////////////////////////////////////////////////////

#if TUNA_PRIV_OS_WINDOWS
    typedef void *tuna_io_handle;
#else
    typedef int tuna_io_handle;
#endif

TUNA_PRIV_API
tuna_io_handle
tuna_get_io_handle(tuna_device const *device);

///////////////////////////////////////////////////////////////////////////////

typedef enum tuna_status {
    TUNA_DOWN,
    TUNA_UP,
} tuna_status;

TUNA_PRIV_API
tuna_error
tuna_get_status(tuna_device const *device, tuna_status *status);

TUNA_PRIV_API
tuna_error
tuna_set_status(tuna_device *device, tuna_status status);

///////////////////////////////////////////////////////////////////////////////

TUNA_PRIV_API
tuna_error
tuna_get_ifindex(tuna_device const *device, int *index);

///////////////////////////////////////////////////////////////////////////////

TUNA_PRIV_API
tuna_error
tuna_get_name(tuna_device const *device, char const **name);

TUNA_PRIV_API
tuna_error
tuna_set_name(tuna_device *device, char const *name);

///////////////////////////////////////////////////////////////////////////////

TUNA_PRIV_API
tuna_error
tuna_get_mtu(tuna_device const *device, size_t *mtu);

TUNA_PRIV_API
tuna_error
tuna_set_mtu(tuna_device *device, size_t mtu);

///////////////////////////////////////////////////////////////////////////////

typedef struct tuna_ip4_address {
    uint_least8_t value[4];
    uint_least8_t prefix_length;
} tuna_ip4_address;

typedef struct tuna_ip6_address {
    uint_least8_t value[16];
    uint_least8_t prefix_length;
} tuna_ip6_address;

typedef enum tuna_address_family {
    TUNA_PRIV_NOT_ADDRESS_FAMILY,

    TUNA_IP4,
    TUNA_IP6,
} tuna_address_family;

typedef struct tuna_address {
    tuna_address_family family;
    union {
        tuna_ip4_address ip4;
        tuna_ip6_address ip6;
    };
} tuna_address;

TUNA_PRIV_API
tuna_error
tuna_get_addresses(tuna_device const *device,
                   tuna_address const **addresses, size_t *count);

TUNA_PRIV_API
tuna_error
tuna_add_address(tuna_device *device, tuna_address const *address);

TUNA_PRIV_API
tuna_error
tuna_remove_address(tuna_device *device, tuna_address const *address);

///////////////////////////////////////////////////////////////////////////////
#if __cplusplus
} // extern "C"
#endif
///////////////////////////////////////////////////////////////////////////////

#endif
